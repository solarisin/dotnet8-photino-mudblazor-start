@page "/table"

<PageTitle>Weather Forecast Table</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Weather forecast</MudText>
<MudText Class="mb-8">This component demonstrates fetching data from the server.</MudText>

@if (forecasts == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
}
else
{
    <MudDataGrid ReadOnly="false" Items="forecasts" Hover="true" SortLabel="Sort By" Elevation="0" EditMode="@DataGridEditMode.Form" EditTrigger="@DataGridEditTrigger.OnRowClick"  >
        <Columns>
            <PropertyColumn Property="x => x.Date" />
            <PropertyColumn Property="x => x.TemperatureC" Title="Temp. (C)" />
            <PropertyColumn Property="x => x.TemperatureF" Title="Temp. (F)" IsEditable="false" />
            <PropertyColumn Property="x => x.Summary" />
        </Columns>
    </MudDataGrid>
}

@code {
    
    // var mainWindow = Electron.WindowManager.BrowserWindows.First();
    // var options = new OpenDialogOptions
    // {
    //     Properties = new OpenDialogProperty[] 
    //     {
    //         OpenDialogProperty.openDirectory
    //     }
    // };
    // var folderPath = await Electron.Dialog.ShowOpenDialogAsync(mainWindow, options);
    // System.Console.WriteLine(folderPath[0]);
    
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

}